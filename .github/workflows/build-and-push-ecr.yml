name: Build and Push to ECR

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ai-tutor-api
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.run_number }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Output image details
      run: |
        echo "Image pushed to ECR:"
        echo "Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Digest: ${{ steps.build.outputs.digest }}"

    - name: Update ECS task definition
      if: github.ref == 'refs/heads/main'
      run: |
        # Get the image URI
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        echo "Image URI: $IMAGE_URI"

    - name: Create deployment artifact
      if: github.ref == 'refs/heads/main'
      run: |
        # Create a deployment artifact with image details
        cat > deployment-info.json << EOF
        {
          "image_uri": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
          "image_tag": "${{ github.sha }}",
          "repository": "${{ env.ECR_REPOSITORY }}",
          "region": "${{ env.AWS_REGION }}",
          "build_number": "${{ github.run_number }}",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        # Upload as artifact for the deployment workflow
        echo "deployment-info.json" >> $GITHUB_OUTPUT

    - name: Upload deployment artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment-info.json
        retention-days: 30
