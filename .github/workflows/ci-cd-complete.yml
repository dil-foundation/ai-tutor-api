name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ai-tutor-api
  ECS_CLUSTER: ai-tutor-cluster
  ECS_SERVICE: ai-tutor-service
  ECS_TASK_DEFINITION: ai-tutor-task-definition
  ECS_CONTAINER_NAME: ai-tutor-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run linting
      run: |
        pip install flake8 black isort
        # Run black formatter check
        black --check app/
        # Run isort import sorting check
        isort --check-only app/
        # Run flake8 linting
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests
      run: |
        # Run any existing tests
        if [ -d "app/tests" ]; then
          pytest app/tests/ -v --cov=app --cov-report=xml
        else
          echo "No tests found, skipping test execution"
        fi

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.run_number }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Create deployment artifact
      if: github.ref == 'refs/heads/main'
      run: |
        # Create a deployment artifact with image details
        cat > deployment-info.json << EOF
        {
          "image_uri": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
          "image_tag": "${{ github.sha }}",
          "repository": "${{ env.ECR_REPOSITORY }}",
          "region": "${{ env.AWS_REGION }}",
          "build_number": "${{ github.run_number }}",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF

    - name: Upload deployment artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment-info.json
        retention-days: 30

  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-info
        path: ./deployment-info

    - name: Set image details
      id: image-details
      run: |
        IMAGE_TAG=$(jq -r '.image_tag' ./deployment-info/deployment-info.json)
        IMAGE_URI=$(jq -r '.image_uri' ./deployment-info/deployment-info.json)
        
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
        echo "Image URI: ${IMAGE_URI}"
        echo "Image Tag: ${IMAGE_TAG}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      run: |
        jq --arg IMAGE_URI "${{ steps.image-details.outputs.image_uri }}" \
           --arg CONTAINER_NAME "${{ env.ECS_CONTAINER_NAME }}" \
           '(.containerDefinitions[] | select(.name == $CONTAINER_NAME) | .image) = $IMAGE_URI' \
           task-definition.json > updated-task-definition.json
        
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
           updated-task-definition.json > final-task-definition.json

    - name: Register new task definition
      id: register-task-definition
      run: |
        NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
          --cli-input-json file://final-task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "new_task_definition_arn=${NEW_TASK_DEFINITION}" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.register-task-definition.outputs.new_task_definition_arn }} \
          --force-new-deployment

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}

    - name: Verify deployment
      run: |
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].status' \
          --output text)
        
        RUNNING_COUNT=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].runningCount' \
          --output text)
        
        DESIRED_COUNT=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].desiredCount' \
          --output text)
        
        echo "Service Status: $SERVICE_STATUS"
        echo "Running Count: $RUNNING_COUNT"
        echo "Desired Count: $DESIRED_COUNT"
        
        if [ "$SERVICE_STATUS" != "ACTIVE" ] || [ "$RUNNING_COUNT" != "$DESIRED_COUNT" ]; then
          echo "❌ Deployment failed or service is not stable"
          exit 1
        else
          echo "✅ Deployment successful - service is running and stable"
        fi

    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ steps.image-details.outputs.image_uri }}" >> $GITHUB_STEP_SUMMARY
        echo "**Task Definition:** ${{ steps.register-task-definition.outputs.new_task_definition_arn }}" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
